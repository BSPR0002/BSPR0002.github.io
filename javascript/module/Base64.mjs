const BtoA=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"],AtoB={"A":0,"B":1,"C":2,"D":3,"E":4,"F":5,"G":6,"H":7,"I":8,"J":9,"K":10,"L":11,"M":12,"N":13,"O":14,"P":15,"Q":16,"R":17,"S":18,"T":19,"U":20,"V":21,"W":22,"X":23,"Y":24,"Z":25,"a":26,"b":27,"c":28,"d":29,"e":30,"f":31,"g":32,"h":33,"i":34,"j":35,"k":36,"l":37,"m":38,"n":39,"o":40,"p":41,"q":42,"r":43,"s":44,"t":45,"u":46,"v":47,"w":48,"x":49,"y":50,"z":51,"0":52,"1":53,"2":54,"3":55,"4":56,"5":57,"6":58,"7":59,"8":60,"9":61,"+":62,"/":63};function getBinary(character,index){const data=AtoB[character];if(data===undefined)throw new Error(`Invalid character "${character}" at [${index}].`);return data}function encode(arrayBuffer){if(arguments.length<1)throw new Error("Failed to execute 'encode': 1 argument required, but only 0 present.");if(!(arrayBuffer instanceof ArrayBuffer))throw new TypeError("Base64 encoder accepts only ArrayBuffer objects.");const dataLength=arrayBuffer.byteLength;if(Math.ceil(dataLength/3)*4>536870784)throw new Error("The length of the encoding result is greater than the maximum safe length of the string.");const operator=new Uint8Array(arrayBuffer),tail=dataLength%3,end=dataLength-tail;var index=0,result="";while(index<end){let temp=0;for(let i=0;i<3;++i){temp<<=8;temp+=operator[index++]}for(let divisor=262144,bit=18;bit>-1;bit-=6){let left=temp>>bit;temp%=divisor;divisor>>=6;result+=BtoA[left]}}if(tail){let temp=0,padding="";while(index<dataLength){temp<<=8;temp+=operator[index++]}let remain=3-tail;do{temp<<=2;padding+="=";--remain}while(remain)for(let divisor=2**(tail*6),bit=tail*6;bit>-1;bit-=6){let left=temp>>bit;temp%=divisor;divisor>>=6;result+=BtoA[left]}result+=padding}return result}function decode(Base64String){if(arguments.length < 1)throw new Error("Failed to execute 'decode': 1 argument required, but only 0 present.");if(typeof Base64String!="string")throw new TypeError("Base64 decoder accepts only strings.");const stringLength=Base64String.length;if(stringLength%4)throw new Error("Invalid string, string length is not a multiple of 4.");var padding=0;for(let i=1;i<4;++i){if(Base64String[stringLength-i]!="=")break;if(i>2)throw new Error("Invalid string with more than 2 complements(=).");++padding}const operator=new Uint8Array(stringLength*0.75-padding),end=padding?stringLength-4:stringLength;var index=0,byte=0;while(index<end){let temp=0;for(let i=0;i<4;++i){let nowIndex=index++;temp<<=6;temp+=getBinary(Base64String[nowIndex],nowIndex)}for(let divisor=65536,bit=16;bit>-1;bit-=8){let left=temp>>bit;temp%=divisor;divisor>>=8;operator[byte++]=left}}if(padding){let finish=end+4-padding,temp=0;do{let nowIndex=index++;temp<<=6;temp+=getBinary(Base64String[nowIndex],nowIndex)}while(index<finish)temp>>=(2*padding);if(padding==1){let left=temp>>8;temp%=256;operator[byte++]=left}operator[byte]=temp}return operator.buffer}export{encode,decode}